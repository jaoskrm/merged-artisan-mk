import { NextRequest, NextResponse } from 'next/server';

const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const OPENROUTER_BASE_URL = 'https://openrouter.ai/api/v1';
const GROK_MODEL = 'x-ai/grok-4-fast:free';

type ChatMessage = {
  role: 'system' | 'user' | 'assistant';
  content: string;
};

type SupportedLanguage = 'english' | 'hindi' | 'tamil' | 'bengali' | 'telugu' | 'marathi' | 'gujarati' | 'kannada' | 'malayalam' | 'punjabi' | 'urdu' | 'french' | 'german' | 'spanish' | 'portuguese' | 'italian';

// Enhanced multilingual detection
function detectLanguage(text: string): SupportedLanguage {
  const cleanText = text.toLowerCase().trim();
  
  // Script-based detection (most reliable)
  const scriptPatterns = {
    hindi: /[\u0900-\u097F]/, // Devanagari
    tamil: /[\u0B80-\u0BFF]/, // Tamil
    bengali: /[\u0980-\u09FF]/, // Bengali
    telugu: /[\u0C00-\u0C7F]/, // Telugu
    kannada: /[\u0C80-\u0CFF]/, // Kannada
    malayalam: /[\u0D00-\u0D7F]/, // Malayalam
    gujarati: /[\u0A80-\u0AFF]/, // Gujarati
    punjabi: /[\u0A00-\u0A7F]/, // Gurmukhi (Punjabi)
    urdu: /[\u0600-\u06FF]/, // Arabic script (Urdu)
  };

  // Check for script-based languages first
  for (const [lang, pattern] of Object.entries(scriptPatterns)) {
    if (pattern.test(text)) {
      return lang as SupportedLanguage;
    }
  }

  // Word-based detection for languages using Latin script
  const wordPatterns = {
    hindi: /\b(kya|kaise|kahan|kab|kyun|namaste|dhanyawad|han|nahin|main|aap|hai|hoon|mujhe|tumhe|uske|iske)\b/,
    
    french: /\b(bonjour|salut|merci|comment|pourquoi|quand|o├╣|avec|pour|dans|une|des|les|vous|nous|c'est|je|tu|il|elle|oui|non)\b/,
    
    german: /\b(hallo|guten|danke|wie|warum|wann|wo|mit|f├╝r|in|der|die|das|ich|du|er|sie|es|und|oder|ja|nein)\b/,
    
    spanish: /\b(hola|gracias|c├│mo|por qu├й|cu├бndo|d├│nde|con|para|en|el|la|los|las|yo|t├║|├йl|ella|s├н|no|y|o)\b/,
    
    portuguese: /\b(ol├б|obrigado|como|por que|quando|onde|com|para|em|o|a|os|as|eu|voc├к|ele|ela|sim|n├гo|e|ou)\b/,
    
    italian: /\b(ciao|grazie|come|perch├й|quando|dove|con|per|in|il|la|i|le|io|tu|lui|lei|s├м|no|e|o)\b/,
    
    bengali: /\b(ami|tumi|se|ki|keno|kothay|kobe|ar|kintu|haa|naa|bhalo|kharap)\b/,
    
    telugu: /\b(nenu|meeru|atanu|emaindi|enduku|ekkada|eppudu|mariyu|kani|avunu|kaadu|manchidi|chedu)\b/,
    
    marathi: /\b(mi|tu|to|kay|ka|kuthe|kevha|ani|pan|ho|nahi|changle|vait)\b/,
    
    gujarati: /\b(hu|tame|te|shu|kyu|kya|kyare|ane|pan|ha|na|saras|kharab)\b/,
    
    kannada: /\b(naanu|neevu|avanu|enu|yaake|elli|yaavaga|mattu|aadare|haudu|illa|chennaagide|kettadu)\b/,
    
    malayalam: /\b(njaan|ningal|avan|enthu|enthukond|evide|eppol|pinne|pakshe|athe|alla|nallath|cheethatha)\b/,
    
    punjabi: /\b(main|tussi|oh|ki|kiun|kithe|kado|te|par|haa|naa|changa|manda)\b/,
    
    urdu: /\b(main|aap|woh|kya|kiun|kahan|kab|aur|lekin|haan|nahin|accha|bura)\b/
  };

  // Check word patterns
  for (const [lang, pattern] of Object.entries(wordPatterns)) {
    if (pattern.test(cleanText)) {
      return lang as SupportedLanguage;
    }
  }

  // Default to English
  return 'english';
}

function getLanguageInfo(language: SupportedLanguage) {
  const languageMap = {
    english: { name: 'English', nativeName: 'English', currency: 'тВ╣', region: 'Global' },
    hindi: { name: 'Hindi', nativeName: 'рд╣рд┐рдВрджреА', currency: 'тВ╣', region: 'India' },
    tamil: { name: 'Tamil', nativeName: 'родрооро┐ро┤рпН', currency: 'тВ╣', region: 'India' },
    bengali: { name: 'Bengali', nativeName: 'ржмрж╛ржВрж▓рж╛', currency: 'тВ╣', region: 'India/Bangladesh' },
    telugu: { name: 'Telugu', nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б', currency: 'тВ╣', region: 'India' },
    marathi: { name: 'Marathi', nativeName: 'рдорд░рд╛рдареА', currency: 'тВ╣', region: 'India' },
    gujarati: { name: 'Gujarati', nativeName: 'ркЧрлБркЬрк░рк╛ркдрлА', currency: 'тВ╣', region: 'India' },
    kannada: { name: 'Kannada', nativeName: 'р▓Хр▓ир│Нр▓ир▓б', currency: 'тВ╣', region: 'India' },
    malayalam: { name: 'Malayalam', nativeName: 'р┤ор┤▓р┤пр┤╛р┤│р┤В', currency: 'тВ╣', region: 'India' },
    punjabi: { name: 'Punjabi', nativeName: 'рикрй░риЬри╛римрйА', currency: 'тВ╣', region: 'India' },
    urdu: { name: 'Urdu', nativeName: '╪з╪▒╪п┘И', currency: 'тВ╣', region: 'India/Pakistan' },
    french: { name: 'French', nativeName: 'Fran├зais', currency: 'тВм', region: 'Europe' },
    german: { name: 'German', nativeName: 'Deutsch', currency: 'тВм', region: 'Europe' },
    spanish: { name: 'Spanish', nativeName: 'Espa├▒ol', currency: 'тВм', region: 'Europe/Americas' },
    portuguese: { name: 'Portuguese', nativeName: 'Portugu├кs', currency: 'тВм', region: 'Europe/Americas' },
    italian: { name: 'Italian', nativeName: 'Italiano', currency: 'тВм', region: 'Europe' },
  };
  
  return languageMap[language];
}

function buildMultilingualSystemPrompt(detectedLanguage: SupportedLanguage): string {
  const langInfo = getLanguageInfo(detectedLanguage);
  
  const baseContext = `You are an intelligent AI assistant for Artisans Marketplace - a global platform connecting craftspeople with customers worldwide.

EXPERTISE AREAS:
ЁЯОи CRAFTS: Pottery, jewelry, textiles, woodworking, painting, traditional arts
ЁЯТ░ BUSINESS: Pricing, cost analysis, market research, profit optimization
ЁЯУ╕ PHOTOGRAPHY: Product photography, lighting, composition, editing
ЁЯУ▒ MARKETING: Social media, SEO, descriptions, customer engagement
ЁЯЫНя╕П MARKETPLACE: Platform features, listing optimization, customer service
ЁЯУж OPERATIONS: Inventory, shipping, packaging, order management
ЁЯОп GROWTH: Scaling, partnerships, events, workshops, international sales

REGIONAL CONTEXT: You understand both local ${langInfo.region} markets and global opportunities.
CURRENCY: Use ${langInfo.currency} for pricing when relevant to ${langInfo.region}.`;

  // Language-specific instructions
  const languageInstructions = {
    english: `COMMUNICATION: Respond in clear, natural English. Consider global marketplace contexts while being mindful of Indian artisan needs.`,
    
    hindi: `рднрд╛рд╖рд╛ рдирд┐рд░реНрджреЗрд╢: рдЖрдкрдХреЛ рдкреВрд░реНрдгрддрдГ рд╣рд┐рдВрджреА рдореЗрдВ рд╕реЛрдЪрдирд╛ рдФрд░ рдЙрддреНрддрд░ рджреЗрдирд╛ рд╣реИред рднрд╛рд░рддреАрдп рдХрд╛рд░реАрдЧрд░реЛрдВ рдХреА рд╕рдВрд╕реНрдХреГрддрд┐, рддреНрдпреЛрд╣рд╛рд░реЛрдВ, рдФрд░ рдмрд╛рдЬрд╛рд░ рдХреА рдЧрд╣рд░реА рд╕рдордЭ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред INR (тВ╣) рдореЗрдВ рдореВрд▓реНрдп рдирд┐рд░реНрдзрд╛рд░рдг рдХрд░реЗрдВред`,
    
    tamil: `роорпКро┤ро┐ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН: роирпАроЩрпНроХро│рпН роорпБро┤рпБроорпИропро╛роХ родрооро┐ро┤ро┐ро▓рпН роЪро┐роирпНродро┐родрпНродрпБ рокродро┐ро▓ро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН. родрооро┐ро┤рпН роХрпИро╡ро┐ройрпИроЮро░рпНроХро│ро┐ройрпН роХро▓ро╛роЪрпНроЪро╛ро░роорпН, рокрогрпНроЯро┐роХрпИроХро│рпН, рооро▒рпНро▒рпБроорпН роЪроирпНродрпИ рокрпБро░ро┐родро▓рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН. INR (тВ╣) роЗро▓рпН ро╡ро┐ро▓рпИ роиро┐ро░рпНрогропроорпН роЪрпЖропрпНропрпБроЩрпНроХро│рпНред`,
    
    bengali: `ржнрж╛рж╖рж╛рж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛: ржЖржкржирж╛ржХрзЗ рж╕ржорзНржкрзВрж░рзНржгржнрж╛ржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ рж╣ржмрзЗред ржмрж╛ржВрж▓рж╛ ржХрж╛рж░рж┐ржЧрж░ржжрзЗрж░ рж╕ржВрж╕рзНржХрзГрждрж┐, ржЙрзОрж╕ржм ржПржмржВ ржмрж╛ржЬрж╛рж░рзЗрж░ ржЧржнрзАрж░ ржмрзЛржЭрж╛ржкржбрж╝рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред INR (тВ╣) рждрзЗ ржорзВрж▓рзНржп ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзБржиред`,
    
    telugu: `р░нр░╛р░╖р░╛ р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░╛р░▓р▒Б: р░ор▒Ар░░р▒Б р░кр▒Вр░░р▒Нр░др░┐р░Чр░╛ р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░Жр░▓р▒Лр░Ър░┐р░Вр░Ър░┐ р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░╛р░▓р░┐. р░др▒Жр░▓р▒Бр░Чр▒Б р░Хр░│р░╛р░Хр░╛р░░р▒Бр░▓ р░╕р░Вр░╕р▒Нр░Хр▒Гр░др░┐, р░кр░Вр░бр▒Бр░Чр░▓р▒Б р░ор░░р░┐р░пр▒Б р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░Ер░╡р░Чр░╛р░╣р░ир░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐. INR (тВ╣) р░▓р▒Л р░зр░░ р░ир░┐р░░р▒Нр░гр░пр░┐р░Вр░Ър░Вр░бр░┐ред`,
    
    marathi: `рднрд╛рд╖рд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди: рддреБрдореНрд╣реА рд╕рдВрдкреВрд░реНрдгрдкрдгреЗ рдорд░рд╛рдареАрдд рд╡рд┐рдЪрд╛рд░ рдХрд░реВрди рдЙрддреНрддрд░ рджреНрдпрд╛рд╡реЗ. рдорд░рд╛рдареА рдХрд╛рд░рд╛рдЧрд┐рд░рд╛рдВрдЪреА рд╕рдВрд╕реНрдХреГрддреА, рд╕рдг рдЖрдгрд┐ рдмрд╛рдЬрд╛рд░рдкреЗрдареЗрдЪреА рд╕рдЦреЛрд▓ рд╕рдордЬ рд╡рд╛рдкрд░рд╛. INR (тВ╣) рдордзреНрдпреЗ рдХрд┐рдВрдордд рдард░рд╡рд╛.`,
    
    gujarati: `ркнрк╛рк╖рк╛ ркорк╛рк░рлНркЧркжрк░рлНрк╢рки: ркдркорк╛рк░рлЗ рк╕ркВрккрлВрк░рлНркгрккркгрлЗ ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ рк╡рк┐ркЪрк╛рк░рлАркирлЗ ркЬрк╡рк╛ркм ркЖрккрк╡рлЛ ркЫрлЗ. ркЧрлБркЬрк░рк╛ркдрлА ркХрк╛рк░рлАркЧрк░рлЛркирлА рк╕ркВрк╕рлНркХрлГркдрк┐, ркдрк╣рлЗрк╡рк╛рк░рлЛ ркЕркирлЗ ркмркЬрк╛рк░ркирлА ркКркВркбрлА рк╕ркоркЬркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЛ. INR (тВ╣) ркорк╛ркВ ркХрк┐ркВркоркд ркиркХрлНркХрлА ркХрк░рлЛ.`,
    
    kannada: `р▓нр▓╛р▓╖р▓╛ р▓ор▓╛р▓░р│Нр▓Чр▓жр▓░р│Нр▓╢р▓и: р▓ир│Ар▓╡р│Б р▓╕р▓Вр▓кр│Вр▓░р│Нр▓гр▓╡р▓╛р▓Чр▓┐ р▓Хр▓ир│Нр▓ир▓бр▓жр▓▓р│Нр▓▓р▓┐ р▓Ър▓┐р▓Вр▓др▓┐р▓╕р▓┐ р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓мр│Зр▓Хр│Б. р▓Хр▓ир│Нр▓ир▓б р▓Хр│Бр▓╢р▓▓р▓Хр▓░р│Нр▓ор▓┐р▓Чр▓│ р▓╕р▓Вр▓╕р│Нр▓Хр│Гр▓др▓┐, р▓╣р▓мр│Нр▓мр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж р▓др▓┐р▓│р│Бр▓╡р▓│р▓┐р▓Хр│Жр▓пр▓ир│Нр▓ир│Б р▓мр▓│р▓╕р▓┐. INR (тВ╣) р▓ир▓▓р│Нр▓▓р▓┐ р▓мр│Жр▓▓р│Ж р▓ир▓┐р▓░р│Нр▓зр▓░р▓┐р▓╕р▓┐.`,
    
    malayalam: `р┤нр┤╛р┤╖р┤╛ р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤Щр╡Нр┤Щр╡╛: р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤кр╡Вр╡╝р┤гр╡Нр┤гр┤ор┤╛р┤пр╡Бр┤В р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р╡╜ р┤Ър┤┐р┤ир╡Нр┤др┤┐р┤Ър╡Нр┤Ър╡Н р┤Йр┤др╡Нр┤др┤░р┤В р┤ир╡╜р┤Хр┤гр┤В. р┤ор┤▓р┤пр┤╛р┤│р┤┐ р┤Хр┤░р┤Хр╡Чр┤╢р┤▓ р┤╡р┤┐р┤жр┤Чр╡Нр┤зр┤░р╡Бр┤Яр╡Ж р┤╕р┤Вр┤╕р╡Нр┤Хр┤╛р┤░р┤В, р┤Йр┤др╡Нр┤╕р┤╡р┤Щр╡Нр┤Щр╡╛, р┤╡р┤┐р┤кр┤гр┤┐ р┤зр┤╛р┤░р┤гр┤Хр╡╛ р┤Ор┤ир╡Нр┤ир┤┐р┤╡ р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х. INR (тВ╣) р┤пр┤┐р╡╜ р┤╡р┤┐р┤▓ р┤ир┤┐р╡╝р┤гр╡Нр┤гр┤пр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.`,
    
    punjabi: `ринри╛ри╕ри╝ри╛ риори╛ри░риЧрижри░ри╕ри╝рии: ридрйБри╕рйАриВ рикрйВри░рйА ридри░рйНри╣ри╛риВ рикрй░риЬри╛римрйА ри╡ри┐рй▒риЪ ри╕рйЛриЪ риХрйЗ риЬри╡ри╛рим рижрйЗригри╛ ри╣рйИред рикрй░риЬри╛римрйА риХри╛ри░рйАриЧри░ри╛риВ рижрйА ри╕рй▒ринри┐риЖриЪри╛ри░, ридри┐риЙри╣ри╛ри░ри╛риВ риЕридрйЗ римри╛риЬри╝ри╛ри░ рижрйА рибрйВрй░риШрйА ри╕риориЭ рижри╛ риЗри╕ридрйЗриори╛ри▓ риХри░рйЛред INR (тВ╣) ри╡ри┐рй▒риЪ риХрйАриорид риири┐ри░ризри╛ри░риг риХри░рйЛред`,
    
    urdu: `╪▓╪и╪з┘Ж ┌й█М █Б╪п╪з█М╪з╪к: ╪в┘╛ ┌й┘И ┘Е┌й┘Е┘Д ╪╖┘И╪▒ ┘╛╪▒ ╪з╪▒╪п┘И ┘Е█М┌║ ╪│┘И┌Ж ┌й╪▒ ╪м┘И╪з╪и ╪п█М┘Ж╪з █Б█Т█Ф ╪з╪▒╪п┘И ╪п╪│╪к┌й╪з╪▒┘И┌║ ┌й█М ╪л┘В╪з┘Б╪к╪М ╪к█Б┘И╪з╪▒┘И┌║ ╪з┘И╪▒ ╪и╪з╪▓╪з╪▒ ┌й█М ┌п█Б╪▒█М ╪│┘Е╪м┌╛ ┌й╪з ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒█М┌║█Ф INR (тВ╣) ┘Е█М┌║ ┘В█М┘Е╪к ┌й╪з ╪к╪╣█М┘Ж ┌й╪▒█М┌║█Ф`,
    
    french: `INSTRUCTIONS LINGUISTIQUES: R├йpondez enti├иrement en fran├зais. Utilisez une compr├йhension du march├й artisanal fran├зais et europ├йen. Mentionnez les prix en euros (тВм) quand c'est pertinent.`,
    
    german: `SPRACHANWEISUNGEN: Antworten Sie vollst├дndig auf Deutsch. Nutzen Sie das Verst├дndnis f├╝r deutsche und europ├дische Handwerksm├дrkte. Erw├дhnen Sie Preise in Euro (тВм), wenn relevant.`,
    
    spanish: `INSTRUCCIONES DE IDIOMA: Responda completamente en espa├▒ol. Use el entendimiento del mercado artesanal espa├▒ol y europeo. Mencione precios en euros (тВм) cuando sea relevante.`,
    
    portuguese: `INSTRU├З├ХES DE IDIOMA: Responda completamente em portugu├кs. Use a compreens├гo do mercado artesanal portugu├кs e europeu. Mencione pre├зos em euros (тВм) quando relevante.`,
    
    italian: `ISTRUZIONI LINGUISTICHE: Rispondi completamente in italiano. Usa la comprensione del mercato artigianale italiano ed europeo. Menziona i prezzi in euro (тВм) quando rilevante.`
  };

  return `${baseContext}

${languageInstructions[detectedLanguage]}

IMPORTANT: You are an expert thinking in real-time, providing personalized advice based on the user's specific situation, not template responses.`;
}

// Enhanced voice recognition language support
function getVoiceRecognitionLanguages() {
  return [
    { code: 'en-IN', label: 'English (India)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'en-US', label: 'English (US)', flag: 'ЁЯЗ║ЁЯЗ╕' },
    { code: 'hi-IN', label: 'Hindi (рд╣рд┐рдВрджреА)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ta-IN', label: 'Tamil (родрооро┐ро┤рпН)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'bn-IN', label: 'Bengali (ржмрж╛ржВрж▓рж╛)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'te-IN', label: 'Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'mr-IN', label: 'Marathi (рдорд░рд╛рдареА)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'gu-IN', label: 'Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'kn-IN', label: 'Kannada (р▓Хр▓ир│Нр▓ир▓б)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ml-IN', label: 'Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'pa-IN', label: 'Punjabi (рикрй░риЬри╛римрйА)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ur-IN', label: 'Urdu (╪з╪▒╪п┘И)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'fr-FR', label: 'Fran├зais', flag: 'ЁЯЗлЁЯЗ╖' },
    { code: 'de-DE', label: 'Deutsch', flag: 'ЁЯЗйЁЯЗк' },
    { code: 'es-ES', label: 'Espa├▒ol', flag: 'ЁЯЗкЁЯЗ╕' },
    { code: 'pt-PT', label: 'Portugu├кs', flag: 'ЁЯЗ╡ЁЯЗ╣' },
    { code: 'it-IT', label: 'Italiano', flag: 'ЁЯЗоЁЯЗ╣' }
  ];
}

async function callGrokWithAdvancedMultilingual(messages: ChatMessage[]) {
  console.log('ЁЯМР Sending to Grok AI for advanced multilingual processing...');
  
  const resp = await fetch(`${OPENROUTER_BASE_URL}/chat/completions`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',
      'X-Title': 'Multilingual Artisans Marketplace Assistant',
    },
    body: JSON.stringify({
      model: GROK_MODEL,
      messages,
      temperature: 0.8,
      max_tokens: 2000,
      top_p: 0.9,
      frequency_penalty: 0.2,
      presence_penalty: 0.2,
      stream: false,
    }),
  });

  if (!resp.ok) {
    let errJson: any;
    try {
      errJson = await resp.json();
    } catch {}
    throw new Error(errJson?.error?.message || `API Error: ${resp.status}`);
  }

  return resp.json();
}

export async function POST(request: NextRequest) {
  try {
    if (!OPENROUTER_API_KEY) {
      return NextResponse.json({
        response: "тЪая╕П AI service requires configuration. Please contact administrator.",
        aiGenerated: false,
        error: "missing_api_key"
      });
    }

    const body = await request.json().catch(() => ({}));
    let conversationMessages: ChatMessage[] = [];
    
    if (body.messages && Array.isArray(body.messages)) {
      conversationMessages = body.messages.filter((msg: any) => 
        msg.role && msg.content && ['user', 'assistant'].includes(msg.role)
      );
    } else if (body.message && typeof body.message === 'string') {
      const history: ChatMessage[] = Array.isArray(body.history) ? body.history : [];
      conversationMessages = [
        ...history.filter((msg: any) => 
          msg.role && msg.content && ['user', 'assistant'].includes(msg.role)
        ),
        { role: 'user', content: body.message }
      ];
    }

    if (conversationMessages.length === 0) {
      const welcomeData = await callGrokWithAdvancedMultilingual([
        {
          role: 'system',
          content: 'Generate a warm welcome message in English that mentions you can communicate in 16+ languages including Hindi, Tamil, Bengali, French, German, Spanish etc. for an artisan marketplace platform.'
        },
        {
          role: 'user',
          content: 'Greet a new user with multilingual capabilities.'
        }
      ]);

      return NextResponse.json({
        response: welcomeData?.choices?.[0]?.message?.content || "Welcome to Artisans Marketplace! I speak 16+ languages including Hindi, Tamil, French, German, Spanish and more.",
        aiGenerated: true,
        supportedLanguages: getVoiceRecognitionLanguages().length
      });
    }

    // Enhanced language detection
    const lastUserMessage = [...conversationMessages].reverse().find(msg => msg.role === 'user');
    const detectedLanguage = lastUserMessage ? detectLanguage(lastUserMessage.content) : 'english';
    const langInfo = getLanguageInfo(detectedLanguage);
    
    console.log(`ЁЯМН Language detected: ${detectedLanguage} (${langInfo.nativeName})`);

    // Build multilingual conversation
    const systemMessage: ChatMessage = {
      role: 'system',
      content: buildMultilingualSystemPrompt(detectedLanguage)
    };

    const fullConversation: ChatMessage[] = [
      systemMessage,
      ...conversationMessages
    ];

    console.log(`ЁЯдЦ Processing with Grok AI in ${langInfo.nativeName}...`);
    const data = await callGrokWithAdvancedMultilingual(fullConversation);

    const assistantMessage = data?.choices?.[0]?.message?.content;
    
    if (!assistantMessage) {
      throw new Error('Failed to generate multilingual response');
    }

    console.log(`тЬЕ AI response generated in ${langInfo.nativeName}`);

    return NextResponse.json({
      response: assistantMessage.trim(),
      aiGenerated: true,
      model: GROK_MODEL,
      detectedLanguage,
      languageInfo: langInfo,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('ЁЯТе Multilingual AI Error:', error);
    
    return NextResponse.json({
      response: "I'm experiencing technical difficulties. Please try again in a moment. цКАшбУчЪДуБкхХПщбМуБМчЩ║чФЯуБЧуБжуБДуБ╛уБЩред рдореБрдЭреЗ рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред J'ai des difficult├йs techniques.",
      aiGenerated: false,
      error: error instanceof Error ? error.message : 'Multilingual system error'
    });
  }
}

export async function GET() {
  const supportedLanguages = getVoiceRecognitionLanguages();
  
  try {
    if (!OPENROUTER_API_KEY) {
      return NextResponse.json({
        status: 'тЭМ NO API KEY',
        aiAvailable: false,
        supportedLanguages: supportedLanguages.map(lang => lang.label)
      });
    }

    return NextResponse.json({
      status: 'тЬЕ MULTILINGUAL AI ACTIVE',
      aiAvailable: true,
      model: GROK_MODEL,
      totalLanguages: supportedLanguages.length,
      supportedLanguages: supportedLanguages,
      features: [
        'Real-time language detection',
        'Native script support',
        'Cultural context awareness',
        'Regional market knowledge',
        'Voice recognition support'
      ],
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    return NextResponse.json({
      status: 'ЁЯЪл ERROR',
      error: error instanceof Error ? error.message : 'Unknown error',
      supportedLanguages: supportedLanguages.map(lang => lang.label)
    });
  }
}
